// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Restaurant {
  id                  String  @id @default(uuid())
  name                String
  imageUrl            String  @map("image_url")
  deliveryFee         Decimal @map("delivery_fee") @db.Decimal(10, 2)
  deliveryTimeMinutes Int     @map("delivery_time_minutes")

  categories Category[]
  products   Product[]
  orders     Order[]

  @@map("restaurants")
}

model Category {
  id       String @id @default(uuid())
  name     String
  imageUrl String @map("image_url")

  restaurants Restaurant[]
  products    Product[]

  @@map("categories")
}

model Product {
  id                 String  @id @default(uuid())
  name               String
  description        String
  imageUrl           String  @map("image_url")
  price              Decimal @db.Decimal(10, 2)
  discountPercentage Int     @default(0) @map("discount_percentage")

  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId String     @map("restaurant_id")

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String   @map("category_id")

  orderProducts OrderProduct[]

  @@map("products")
}

model OrderProduct {
  id        String  @id @default(uuid())
  quantity  Int

  orderId   String @map("order_id")
  order     Order   @relation(fields: [orderId], references: [id])
  
  productId String @map("product_id")
  product   Product @relation(fields: [productId], references: [id])

  @@map("Order_products")
}

model Order {
  id                  String   @id @default(uuid())
  deliveryFee         Decimal  @map("delivery_fee") @db.Decimal(10, 2)
  deliveryTimeMinutes Int      @map("delivery_time_minutes")
  subtotalPrice       Decimal  @map("subtotal_price") @db.Decimal(10, 2)
  totalPrice          Decimal  @map("total_price") @db.Decimal(10, 2)
  totalDiscounts      Decimal  @map("total_discounts") @db.Decimal(10, 2)
  createdAt           DateTime @default(now()) @map("created_at")

  status OrderStatus

  products OrderProduct[]

  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId String     @map("restaurant_id")

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  @@map("orders")
}

enum OrderStatus {
  CONFIRMED
  CANCELED
  PREPARING
  DELIVERING
  COMPLETED
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?

  accounts Account[]
  sessions Session[]
  orders   Order[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
